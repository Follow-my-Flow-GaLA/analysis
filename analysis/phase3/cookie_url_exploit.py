import os, re, codecs, glob, difflib
from tqdm import tqdm
from phase3_config import CONFIG
from pymongo import MongoClient
from exploit_gen.exploit_generator import ExploitGenerator
from exploit_gen.payload_comp import best_match, exploit_tuning
from record_reader import get_sink_val_list

### Note: row_col is in the format of "row,col"
###       all dummy values are currently filtered out

cookie_sinktype_list = ["cookie"]
url_sinktype_list = ["anchorSrcSink", "iframeSrcSink", "imgSrcSink", "scriptSrcUrlSink"]
other_sinktype_list = ["setAtrribute"]

LIMIT = -1

client = MongoClient("mongodb://localhost:27017/")
db = client["phase3"]
data_to_change_collection = db["data_to_change"]
def_val_dataset_collection = db["def_val_dataset"]

sink_dict = {}

def get_website_set():
    fpath = "/media/datak/inactive/sanchecker/04_18_detector_1M_phase3_db_crawl_consequence.log"
    first_line = "{}"
    with open(fpath, "r") as f:
        first_line = f.readline()
    website_set = eval(first_line)
    # replace all . to _
    website_set = [x.replace(".","_") for x in website_set]
    return website_set

# output: data_to_change_list = [{var_name, row_col(array), payload, file_name, sink_type}]
def get_data_to_change_list(site):    
    data_to_change_obj = data_to_change_collection.find_one({"_id": site})
    if not data_to_change_obj:
        return []
    data_to_change_list = data_to_change_obj["data_to_change"]
    return data_to_change_list
 
# output: sink_dict = {site: [{var_name, row_col(array), src_payload, file_name, sink_payload, sink_type, start_pos, end_pos, sink_string, message_id}]
def update_sink_dict(site, sink_val_list, data_to_change_list):
    global sink_dict
    sink_dict[site] = []
    # create a dict to store if flow is found for each payload_val
    flow_found_dict = {}
    for sink_val in sink_val_list:
        flow_found_dict[sink_val["sink_payload"]] = False
    # compare sink_val_list with data_to_change_list
    check_duplicate_set = set()
    for data_to_change in data_to_change_list:
        payload = data_to_change["payload"]
        for sink_val in sink_val_list:
            ratio, best_substring = best_match(payload, sink_val["sink_payload"])
            if ratio > CONFIG.STR_MATCH_THRESHOLD:
                flow_found_dict[sink_val["sink_payload"]] = True
                sink_dict_elem = {
                    "var_name": data_to_change["var_name"],
                    "row_col": data_to_change["row_col"],
                    "src_payload": data_to_change["payload"],
                    "file_name": data_to_change["file_name"],
                    "sink_type": sink_val["sink_type"],
                    "sink_payload": sink_val["sink_payload"],
                    "start_pos": sink_val["start_pos"],
                    "end_pos": sink_val["end_pos"],
                    "sink_string": sink_val["sink_string"],
                    "message_id": sink_val["message_id"],
                }
                if str(sink_dict_elem) in check_duplicate_set:
                    pass
                else:
                    sink_dict[site].append(sink_dict_elem)
                    check_duplicate_set.add(str(sink_dict_elem))
                break

def replace_no_quote(begin, whole):
    # Decide if str whole startswith str begin, ignoring ', " and `
    begin_idx = 0
    whole_idx = 0
    while begin_idx != len(begin):
        if whole[whole_idx] == begin[begin_idx]:
            begin_idx += 1
            whole_idx += 1
            continue
        elif begin[begin_idx] in ['"', "'", "`"]:
            begin_idx += 1
            continue
        elif whole[whole_idx] in ['"', "'", "`"]:
            whole_idx += 1
            continue
        else:
            # Not matched
            return None
    return whole[whole_idx:]

# Note: this function will change payload in sink_dict
def generate_and_save_exploit(site):
    global sink_dict
    
    cookie_url_exploit_list = []
    
    data_list = sink_dict[site]
    for data in data_list:
        if data["sink_type"] in cookie_sinktype_list:
            # change all segments of alphanumeric characters to 67890
            data["exploit"] = re.sub(r"[a-zA-Z0-9]+", "67890", data["src_payload"])
        elif data["sink_type"] in url_sinktype_list:
            data["exploit"] = "67890"
        elif data["sink_type"] in other_sinktype_list:
            data["exploit"] = 'data:,console.log(67890)//"'
        else:
            continue
        cookie_url_exploit_list.append(data)
    
    # store to db
    if len(cookie_url_exploit_list) > 0:
        db["cookie_url_exploit"].update_one(
            {"_id": site},
            {"$set": {"cookie_url_exploit": cookie_url_exploit_list}},
            upsert=True
        )
  
if __name__ == "__main__":
    mode = "only_use_data_to_change"
    num = 1000
    
    website_set = get_website_set()
    
    counter = 0
    
    os.chdir(CONFIG.PHASE3_RECORD_PATH)
    
    if mode == "only_use_data_to_change":
        for site in website_set:
            data_to_change_list = get_data_to_change_list(site)
            exploit_list = []
            for data in data_to_change_list:
                if data["payload"] in ["~"]:
                    continue
                exploit_list.append({
                    "var_name": data["var_name"],
                    "row_col": data["row_col"],
                    "src_payload": data["payload"],
                    "file_name": data["file_name"],
                    "sink_type": "",
                    "sink_payload": "",
                    "start_pos": 0,
                    "end_pos": 0,
                    "sink_string": "",
                    "message_id": "0",
                    "exploit": re.sub(r"[a-zA-Z0-9]+", "67890", data["payload"])
                })
            if len(exploit_list) > 0:
                db["cookie_url_exploit"].update_one(
                    {"_id": site},
                    {"$set": {"cookie_url_exploit": exploit_list}},
                    upsert=True
                )
    
    elif mode == "get_website_list_to_crawl":
        domain_range = []
        if num:
            import csv
            with open('/media/datak/inactive/sanchecker/src/tranco_LJ494_5k.csv', newline='') as csvfile:
                reader = csv.reader(csvfile)
                for row in reader:
                    idx = row[0]
                    if int(idx) > num:
                        break
                    domain = row[1]
                    domain_range.append(domain)
                # print(len(domain_range))
                
        target_name = './nonxss_sink_to_validate_website_list.csv' if not num else f'./nonxss_sink_to_validate_{num}_website_list.csv'
        if True: #with open(target_name, 'w') as fw:
            for fpath in glob.iglob( "record_*" ):
                z = fpath.split('_')
                site = '_'.join(z[1:len(z)-3])
                site = site.replace(".","_")
                
                if domain_range and (site.replace("_",".") not in domain_range):
                    continue
                
                # check if site is in website_set
                if site not in website_set:
                    continue
                else:
                    counter = counter + 1
                    # print(f'Writing {counter},{site.replace("_",".")}')
                    print(f'{counter},{site.replace("_",".")}')
                
    else:
    
        for fpath in tqdm(glob.iglob( "record_*" )):
            z = fpath.split('_')
            site = '_'.join(z[1:len(z)-3])
            site = site.replace(".","_") #TODO: this is no use
            
            # check if site is in website_set
            if site not in website_set:
                continue
            else:
                counter = counter + 1
                if LIMIT > 0 and counter > LIMIT:
                    break
                # print(site)
            
            # read record file
            sink_val_list = get_sink_val_list(site, fpath)
            
            # read data to change from db
            data_to_change_list = get_data_to_change_list(site)
            # get only non-dummy payload values
            data_to_change_list = [x for x in data_to_change_list if x["payload"] != "~"]
            
            # update sink_dict
            update_sink_dict(site, sink_val_list, data_to_change_list)
            generate_and_save_exploit(site)