!function(){
	var data = {methodAttributes: {src:'', onload:'', onerror:''}}, required_list = ['allowed'], div = document.createElement("div");
	
	# sink functions combined with different conditional checkings
	
	# sink 1: eval

	data.marker1 && data.marker1.content && eval(data.marker1.content);

	# sink 2: document.write

	data.marker2 && document.write(data.marker2.toLowerCase() === 'allowed'? data.doc : '');

	# sink 3: innerHTML

	div.innerHTML = data.marker3.startsWith('allowed')? data.doc || '';

	# sink 4: innerHTML (more implicit, could be hard to detect for now)

	# This is the exploit
	Object.prototype.x = 'x'; 
	Object.prototype.x.constructor.marker4.innerHTML = '<img/src/onerror%3dalert(4)>'
	
	String.marker4 = document.createElement('div');

	# sink 5: new Function

	var funcBody = required_list.indexOf(data.marker5) > -1? data.doc : '';
	var h = new Function(funcBody); 
	h();
	
	# sink 6: new Function (more implicit)

	# One possible exploit. Could exist formats other than this. 
	Object.prototype.marker6 = 'allowed'; 
	Object.prototype.propName = "a':1,[alert(6)]:1,'b";

	if (required_list.includes(data.marker6)) {
		funcBody = "return{'" + data.propName + "':function(){return 'hello' }"; 
		h = new Function(funcBody);
        	h();
	}
	
	# sink 7: setAttribute 

	if (let t = data.marker7) {
		for (var field in data) {
			field in data.methodAttributes && div.setAttribute(field, data[field]);
		}
	}

	# sink 8: jQuery append
	# reserved for future test: the tool may not be able to support jQuery for now, I suppose? 
	
	# should add jQuery first
	# in html: <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

	#var $newdiv1 = $( "<div id='object1'></div>" );
	#data.marker8 && typeof data.marker8 === 'object' && data.marker8.doc && $newdiv1.append("<p>Test" + data.marker8.doc + "</p>");

}();
